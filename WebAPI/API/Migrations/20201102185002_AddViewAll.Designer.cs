// <auto-generated />
using System;
using API.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(eLearnDBContext))]
    [Migration("20201102185002_AddViewAll")]
    partial class AddViewAll
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("API.Model.AllLogin", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("AllLogins");
                });

            modelBuilder.Entity("API.Model.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("API.Model.CompletedExam", b =>
                {
                    b.Property<int>("CeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ce_id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("DiscipleId")
                        .HasColumnType("int")
                        .HasColumnName("disciple_id");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.Property<bool?>("Gained")
                        .HasColumnType("bit")
                        .HasColumnName("gained");

                    b.HasKey("CeId");

                    b.HasIndex("DiscipleId");

                    b.HasIndex("ExamId");

                    b.ToTable("Completed_exams");
                });

            modelBuilder.Entity("API.Model.Disciple", b =>
                {
                    b.Property<int>("NdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nd_id")
                        .UseIdentityColumn();

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(128)
                        .HasColumnType("binary(128)")
                        .HasColumnName("passwordHASH")
                        .IsFixedLength(true);

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(128)
                        .HasColumnType("binary(128)")
                        .HasColumnName("passwordSALT")
                        .IsFixedLength(true);

                    b.Property<string>("Pesel")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("pesel");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("postal_code")
                        .IsFixedLength(true);

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("NdId")
                        .HasName("PK_new_disciples");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Disciples");
                });

            modelBuilder.Entity("API.Model.DiscipleGradesAll", b =>
                {
                    b.Property<string>("DiscipleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscipleSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gName");

                    b.Property<int?>("GValue")
                        .HasColumnType("int")
                        .HasColumnName("gValue");

                    b.Property<DateTime?>("GiDate")
                        .HasColumnType("date");

                    b.Property<string>("Subject")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToView("DiscipleGradesAll");
                });

            modelBuilder.Entity("API.Model.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("API.Model.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("grade_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("API.Model.GradesIssued", b =>
                {
                    b.Property<int>("GiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gi_id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateIssued")
                        .HasColumnType("date")
                        .HasColumnName("date_issued");

                    b.Property<int?>("DiscipleId")
                        .HasColumnType("int")
                        .HasColumnName("disciple_id");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("GiId");

                    b.HasIndex("DiscipleId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades_Issued");
                });

            modelBuilder.Entity("API.Model.LessonHour", b =>
                {
                    b.Property<int>("LessonHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lesson_hour_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("LessonHourId");

                    b.ToTable("LessonHours");
                });

            modelBuilder.Entity("API.Model.RegisterDisciple", b =>
                {
                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("NdId")
                        .HasColumnType("int")
                        .HasColumnName("nd_id");

                    b.Property<int>("RegisterDId")
                        .HasColumnType("int")
                        .HasColumnName("registerD_id");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasIndex("ClassId");

                    b.HasIndex("NdId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("RegisterDisciples");
                });

            modelBuilder.Entity("API.Model.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.HasKey("RoomId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("API.Model.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("school_id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("SchoolId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TypeId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("API.Model.SchoolProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ProfileId");

                    b.ToTable("School_Profiles");
                });

            modelBuilder.Entity("API.Model.SchoolsType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("TypeId");

                    b.ToTable("Schools_Types");
                });

            modelBuilder.Entity("API.Model.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subject_id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("name");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("API.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacher_id")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(128)
                        .HasColumnType("binary(128)")
                        .HasColumnName("passwordHash")
                        .IsFixedLength(true);

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(128)
                        .HasColumnType("binary(128)")
                        .HasColumnName("passwordSalt")
                        .IsFixedLength(true);

                    b.Property<string>("Pesel")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("pesel");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.Property<bool?>("WhetherDirector")
                        .HasColumnType("bit")
                        .HasColumnName("whether_director");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("API.Model.TeachersClass", b =>
                {
                    b.Property<int>("TcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tc_id")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.Property<bool?>("WhetherEducator")
                        .HasColumnType("bit")
                        .HasColumnName("whether_educator");

                    b.HasKey("TcId")
                        .HasName("PK_teachers_classes");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teachers_Classes");
                });

            modelBuilder.Entity("API.Model.TeachersSchool", b =>
                {
                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teachers_Schools");
                });

            modelBuilder.Entity("API.Model.TeachersSubject", b =>
                {
                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teachers_Subjects");
                });

            modelBuilder.Entity("API.Model.TimeTable", b =>
                {
                    b.Property<int>("TimetableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timetable_id")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("day_of_week");

                    b.Property<int?>("LessonHourId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_hour_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("TimetableId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonHourId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TimeTable");
                });

            modelBuilder.Entity("API.Model.CompletedExam", b =>
                {
                    b.HasOne("API.Model.Disciple", "Disciple")
                        .WithMany("CompletedExams")
                        .HasForeignKey("DiscipleId")
                        .HasConstraintName("FK_Completed_exams_New_Disciples");

                    b.HasOne("API.Model.Exam", "Exam")
                        .WithMany("CompletedExams")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Completed_exams_Exams");

                    b.Navigation("Disciple");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("API.Model.Disciple", b =>
                {
                    b.HasOne("API.Model.Class", "Class")
                        .WithMany("Disciples")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_New_Disciples_Classes");

                    b.HasOne("API.Model.School", "School")
                        .WithMany("Disciples")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_New_Disciples_Schools");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany("Disciples")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_New_Disciples_Teachers");

                    b.Navigation("Class");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.GradesIssued", b =>
                {
                    b.HasOne("API.Model.Disciple", "Disciple")
                        .WithMany("GradesIssueds")
                        .HasForeignKey("DiscipleId")
                        .HasConstraintName("FK_Grades_Issued_New_Disciples");

                    b.HasOne("API.Model.Grade", "Grade")
                        .WithMany("GradesIssueds")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grades_Issued_grades");

                    b.HasOne("API.Model.Subject", "Subject")
                        .WithMany("GradesIssueds")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Grades_Issued_Subjects");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany("GradesIssueds")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Grades_Issued_Teachers");

                    b.Navigation("Disciple");

                    b.Navigation("Grade");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.RegisterDisciple", b =>
                {
                    b.HasOne("API.Model.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_RegisterDisciples_Classes");

                    b.HasOne("API.Model.Disciple", "Nd")
                        .WithMany()
                        .HasForeignKey("NdId")
                        .HasConstraintName("FK_RegisterDisciples_New_Disciples");

                    b.HasOne("API.Model.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_RegisterDisciples_Schools");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_RegisterDisciples_Teachers");

                    b.Navigation("Class");

                    b.Navigation("Nd");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.Room", b =>
                {
                    b.HasOne("API.Model.School", "School")
                        .WithMany("Rooms")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Rooms_Schools");

                    b.Navigation("School");
                });

            modelBuilder.Entity("API.Model.School", b =>
                {
                    b.HasOne("API.Model.SchoolProfile", "Profile")
                        .WithMany("Schools")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_Schools_School_Profiles");

                    b.HasOne("API.Model.SchoolsType", "Type")
                        .WithMany("Schools")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Schools_Schools_Types");

                    b.Navigation("Profile");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("API.Model.TeachersClass", b =>
                {
                    b.HasOne("API.Model.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_teachers_classes_Classes");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teachers_classes_Teachers");

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.TeachersSchool", b =>
                {
                    b.HasOne("API.Model.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_teachers_schools_Schools");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teachers_schools_Teachers");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.TeachersSubject", b =>
                {
                    b.HasOne("API.Model.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Teachers_Subjects_Subjects");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Teachers_Subjects_Teachers");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.TimeTable", b =>
                {
                    b.HasOne("API.Model.Class", "Class")
                        .WithMany("TimeTables")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_TimeTable_Classes");

                    b.HasOne("API.Model.LessonHour", "LessonHour")
                        .WithMany("TimeTables")
                        .HasForeignKey("LessonHourId")
                        .HasConstraintName("FK_TimeTable_LessonHours");

                    b.HasOne("API.Model.Room", "Room")
                        .WithMany("TimeTables")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_TimeTable_Rooms");

                    b.HasOne("API.Model.School", "School")
                        .WithMany("TimeTables")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_TimeTable_Schools");

                    b.HasOne("API.Model.Subject", "Subject")
                        .WithMany("TimeTables")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_TimeTable_Subjects");

                    b.HasOne("API.Model.Teacher", "Teacher")
                        .WithMany("TimeTables")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TimeTable_Teachers");

                    b.Navigation("Class");

                    b.Navigation("LessonHour");

                    b.Navigation("Room");

                    b.Navigation("School");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Model.Class", b =>
                {
                    b.Navigation("Disciples");

                    b.Navigation("TeachersClasses");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("API.Model.Disciple", b =>
                {
                    b.Navigation("CompletedExams");

                    b.Navigation("GradesIssueds");
                });

            modelBuilder.Entity("API.Model.Exam", b =>
                {
                    b.Navigation("CompletedExams");
                });

            modelBuilder.Entity("API.Model.Grade", b =>
                {
                    b.Navigation("GradesIssueds");
                });

            modelBuilder.Entity("API.Model.LessonHour", b =>
                {
                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("API.Model.Room", b =>
                {
                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("API.Model.School", b =>
                {
                    b.Navigation("Disciples");

                    b.Navigation("Rooms");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("API.Model.SchoolProfile", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("API.Model.SchoolsType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("API.Model.Subject", b =>
                {
                    b.Navigation("GradesIssueds");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("API.Model.Teacher", b =>
                {
                    b.Navigation("Disciples");

                    b.Navigation("GradesIssueds");

                    b.Navigation("TeachersClasses");

                    b.Navigation("TimeTables");
                });
#pragma warning restore 612, 618
        }
    }
}
